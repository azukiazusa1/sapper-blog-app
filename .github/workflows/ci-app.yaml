name: CI-App
on:
  pull_request:
    paths:
      - app/**
      - package.lock.json

env:
  API_KEY: ${{ secrets.PREVIEW_API_KEY }}
  PREVIEW_API_KEY: ${{ secrets.PREVIEW_API_KEY }}
  SPACE: ${{ secrets.PREVIEW_SPACE }}
  ENVIRONMENTS: test
  PUBLIC_BASE_URL: http://localhost:3000
  PUBLIC_ANALYTICS_ID: ""
  GITHUB_TOKEN: ""
  PRIVATE_KEY: ""
  CLIENT_EMAIL: ""
  PROPERTY_ID: ""
  NODE_ENV: development
  # Turborepo Remote Cache
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: npm
      - name: Build
        uses: preactjs/compressed-size-action@v2
        with:
          pattern: "app/build/**/*.{js,css,html.json}"

  lighthouse:
    name: Lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: npm
      - uses: actions/cache@v4
        id: node_modules_cache_id
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.10.x
      - name: Build
        run: npm run build
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  # vrt:
  #   name: Visual Regression Testing
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/playwright:v1.31.1-focal
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version-file: package.json
  #         cache: npm
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Build
  #       run: npm run build
  #     - name: Add permissions
  #       run: chmod 777 -R .
  #     - name: Run Tests
  #       run: npx playwright test
  #       working-directory: app
  #     - uses: actions/upload-artifact@v3
  #       if: failure()
  #       with:
  #         name: test-results
  #         path: app/test-results/
  a11y:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: npm
      - uses: actions/cache@v4
        id: node_modules_cache_id
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Install pa11y-ci
        run: npm install -g pa11y-ci
      - name: Build
        run: npm run build
      - name: pa11y-ci
        run: npm run serve -w=app & sleep 3; pa11y-ci
  # test:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version-file: package.json
  #         cache: npm
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps
  #     - name: Serve Storybook and run tests
  #       run: npm run test-storybook:ci
